User-Defined Exceptions:
	Python also allows you to create your own exceptions by deriving classes from the standard built-in exceptions.
	This is useful when you need to display more specific information when an exception is caught

	Enhances code readability.
	Allows Project specific exception Handling.


class UserClass(Exception):
   def __init__(self, arg):
      self.arg = arg

   def __str__(self):
	return f'{self.arg}'


try:
   raise UserClass('msg')

except UserClass as e:
   print(e)




class InvalidAgeException(Exception):
    "Raised when the input value is less than 18"
    pass

number = 18

try:
    input_num = int(input("Enter a number: "))
    if input_num < number:
        raise InvalidAgeException
    else:
        print("Eligible to Vote")
        
except InvalidAgeException:
    print("Exception occurred: Invalid Age")




#****************************************************************************


Exception Propogation: Giving a chance to caller method to handle the Exception is called Exception Propogation.

def foo():	
	raise Class_name()

try:
	foo()
except:
	#code



















class GradeChecker(Exception):
    pass
        



def in_grade(num):
    if num >= 90 and num <=100:
        return 'A'
    else:
        raise GradeChecker('please enter the correct number')
            


try:
    print(in_grade(200))
except:
    print('Handled')
    
