Comprehensions in Python provide us with a short and concise way to construct new sequences (such as lists, set, dictionary etc.) 
Python supports the following 4 types of comprehensions:

1. List Comprehensions
2. Set Comprehensions
3. Generator Comprehensions
4. Dictionary Comprehensions





***********************************************************************************
1.List Comprehensions:


List Comprehensions provide an elegant way to create new lists.
syntax:

output_list = [output_exp for var in input_list if (var satisfies this condition)]

Note that list comprehension may or may not contain an if condition. 
List comprehensions can contain multiple for (nested list comprehensions).


------------------------------------







# Constructing output list WITHOUT
# Using List comprehensions
input_list = [1, 2, 3, 4, 4, 5, 6, 7, 7]
  
output_list = []
  
# Using loop for constructing output list
for var in input_list:
    if var % 2 == 0:
        output_list.append(var)
  
print("Output List using for loop:", output_list)
Output:

Output List using for loop: [2, 4, 4, 6]

# Using List comprehensions
# for constructing output list
  
input_list = [1, 2, 3, 4, 4, 5, 6, 7, 7]
  
  
list_using_comp = [var for var in input_list if var % 2 == 0]
  
print("Output List using list comprehensions:",
                               list_using_comp)
Output:

Output List using list comprehensions: [2, 4, 4, 6]

***********************************************************************************


2. Set Comprehensions:

Set comprehensions are pretty similar to list comprehensions. The only difference between them is that set comprehensions use curly brackets { }.



***********************************************************************************
3. Generator Comprehensions:

Generator Comprehensions are very similar to list comprehensions.
One difference between them is that generator comprehensions use circular brackets whereas list comprehensions use square brackets. 
The major difference between them is that generators don’t allocate memory for the whole list.
Instead, they generate each value one by one which is why they are memory efficient.

----------------------------------------------------------------

input_list = [1, 2, 3, 4, 4, 5, 6, 7, 7]
  
output_gen = (var for var in input_list if var % 2 == 0)
 
print("Output values using generator comprehensions:", end = ' ')
  
for var in output_gen:
    print(var, end = ' ')
Output:

Output values using generator comprehensions: 2 4 4 6 

***********************************************************************************

4.Dictionary Comprehensions:


Extending the idea of list comprehensions, we can also create a dictionary using dictionary comprehensions.
syntax:

output_dict = {key:value for (key, value) in iterable if (key, value satisfy this condition)}



---------------------------------------------------------------------

Example #1: Suppose we want to create an output dictionary which contains only the odd numbers that are present in the input list as keys and their cubes as values. 
Let’s see how to do this using for loops and dictionary comprehension.


input_list = [1, 2, 3, 4, 5, 6, 7]
  
output_dict = {}
  
# Using loop for constructing output dictionary
for var in input_list:
    if var % 2 != 0:
        output_dict[var] = var**3
  
print("Output Dictionary using for loop:",
                             output_dict )
Output:

Output Dictionary using for loop: {1: 1, 3: 27, 5: 125, 7: 343}

# Using Dictionary comprehensions
# for constructing output dictionary
  
input_list = [1,2,3,4,5,6,7]
  
dict_using_comp = {var:var ** 3 for var in input_list if var % 2 != 0}
  
print("Output Dictionary using dictionary comprehensions:",
                                           dict_using_comp)
Output:

Output Dictionary using dictionary comprehensions: {1: 1, 3: 27, 5: 125, 7: 343}


******************************************************************************************************

nested for 
syntax = [out_exp for i in iterable for j in iterable]

