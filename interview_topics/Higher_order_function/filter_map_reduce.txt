Higher order function:
	A function that is having another function as an argument or a function that 
	returns another function as a return in the output is called the High order function.

1. filter
2. map
3. reduce





******************************************************************************

1. The filter() function filters the given sequence with the help of a function that tests each element in the sequence to be true or not.


syntax:
	filter(function, sequence)
Parameters:
function:
	 function that tests if each element of a sequence true or not.
sequence: 
	sequence which needs to be filtered, it can be sets, lists, tuples, or containers of any iterators.
Returns:
	returns an iterator that is already filtered.


-----------------------------------
# function that filters vowels
def fun(variable):
    letters = ['a', 'e', 'i', 'o', 'u']
    if (variable in letters):
        return True
    else:
        return False
  
  
# sequence
sequence = ['k', 'e', 'e', 'o', 'm', 's', 'p', 'r']
  
# using filter function
filtered = filter(fun, sequence)
  
print('The filtered letters are:')
for s in filtered:
    print(s)


******************************************************************************













******************************************************************************
2. map() function returns a map object(which is an iterator) of the results after applying the given function to each item of a given iterable (list, tuple etc.)

Syntax :

map(fun, iter*)
Parameters :

fun : It is a function to which map passes each element of given iterable.
iter : It is a iterable which is to be mapped.

NOTE : You can pass one or more iterable to the map() function.

Returns :

Returns a map object of the results after applying the given function  
to each item of a given iterable (list, tuple etc.) 
 
NOTE : The returned value from map() (map object) then can be passed to functions like list() (to create a list), set() (to create a set) .
 

-----------------------------------
CODE 1


# Python program to demonstrate working
# of map.
  
# Return double of n
def addition(n):
    return n + n
  
# We double all numbers using map()
numbers = (1, 2, 3, 4)
result = map(addition, numbers)
print(list(result))
Output :

[2, 4, 6, 8]

--------------------------------------
CODE 2

# Add two lists using map and lambda
  
numbers1 = [1, 2, 3]
numbers2 = [4, 5, 6]
  
result = map(lambda x, y: x + y, numbers1, numbers2)
print(list(result))
Output :

[5, 7, 9]

******************************************************************************















******************************************************************************

3. The reduce(fun,seq) function in python is defined in the functools module and doesn't return multiple values or any iterator, 
it just returns a single value as output which is the result of the whole iterable getting reduced to only a single integer or string or boolean.
implements mathematical technique reduction or folding.

Working :  

At first step, first two elements of sequence are picked and the result is obtained.
Next step is to apply the same function to the previously attained result and the number just succeeding the second element and the result is again stored.
This process continues till no more elements are left in the container.
The final returned result is returned and printed on console.

--------------------------------------------

# importing functools for reduce()
import functools
 
# initializing list
lis = [1, 3, 5, 6, 2, ]
 
# using reduce to compute sum of list
print("The sum of the list elements is : ", end="")
print(functools.reduce(lambda a, b: a+b, lis))
 
# using reduce to compute maximum element from list
print("The maximum element of the list is : ", end="")
print(functools.reduce(lambda a, b: a if a > b else b, lis))
Output
The sum of the list elements is : 17
The maximum element of the list is : 6





******************************************************************************

